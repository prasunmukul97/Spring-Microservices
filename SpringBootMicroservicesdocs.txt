PhotoApp Eureka server configuration:

server.port=8010
spring.application.name=Discoveryservice
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:8010/eureka  //This is the URL by which client applications communicate with Eureka server.

Users microservices properties:

server.port=0 //0 means random port number will be assigned by server.
spring.application.name=users-ws
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
spring.devtools.restart.enabled=true

To enable H2 Console we use below properties:
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

Urls used to access ws via zuul:
http://localhost:8011/users-ws/users/status/check
http://localhost:8011/account-ws/account/status/check

Important point regarding instance of microservices.
1. If one instance of a microservices is up and running, and we try to start another instance of same microservice, then instance gets overriden.
	Instance id is: prasun-PC:users-ws:0
	For eg: 
	 we have microservice running at port number:61703 with URL- http://prasun-pc:61703/users/status/check
	 If we start another instance of same microservice, then port number gets overriden and only one instance gets registered.
									 port number: 61756 with URL -http://prasun-pc:61756/users/status/check
2. To register multiple instance of same microservice to Eureka discovery, we have to use multiple instance-id.
3. To specify multiple instance id , we use a property :
		eureka.instance.instance-id
	 This property must have a unique value. 
	 We can use variable to generate random value.
	 ${spring.application.name}:${spring.application.instance_id:${random.value}}
	 
	 spring.application.name - It is read from property file.
	 spring.application.instance_id- It is passed by command line argument. 
				mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=prasun
	 If not available then random value gets generated and assigned using ${random.value}
	  For example:Multiple running instances are -
			users-ws:fac40ee821f177c862a55ea9ba4602b6 , users-ws:8e8853807eeee5dd5ad5e291deaa3629
			
			users-ws- application name
			fac40ee821f177c862a55ea9ba4602b6- random generated value.
			
	  After passing value of instance id from command line , we get below instances running:
	  
	  users-ws:2f801011f29f34b73e0497dc3fb02a34 , users-ws:prasun , users-ws:b1b2d411b54e6023f3fb68be3c68b4e1 , users-ws:52e2c332d254eb5d6cf94abe6f3a8ead
	  
	  Command to assign port number using command line:
	  
	  mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=saurabh,--server.port=8999
			
			
4. For server port as well, we can either pass a port number using commandline or we can use the port randomly generated by server if it is not passed as command line.
	server.port=${PORT:0}
	Here PORT is assigned to server.port if passed as command line or else 0 is used to genrate random port number.
	
Important points on spring security.
1. If we add spring boot starter security to pom file of microservice, then we get unauthorized response for any URL that we hit.

{
    "timestamp": "2020-02-04T06:59:02.578+0000",
    "status": 401,
    "error": "Unauthorized",
    "message": "Unauthorized",
    "path": "/users/status/check"
}

For this to resolve, we need to provide proper websecurity configuration.

Spring Security:
-----------------------------------------------------------------------------

To change default user name and password we use below properties in application.properties file:

spring.security.user.name=prasun
spring.security.user.password=prasun

Spring boot security using JPA and MySql:
------------------------------------------------------------------
CREATE TABLE user (id VARCHAR(10), active VARCHAR(10),
       password VARCHAR(100), roles VARCHAR(50), user_name VARCHAR(100));
	   
INSERT INTO user VALUES('1',"Y","pass","ROLE_USER","user");

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/springbootdb
spring.datasource.username=root
spring.datasource.password=password

SHOW VARIABLES WHERE Variable_name = 'hostname';
+---------------+-----------+
| Variable_name | Value     |
+---------------+-----------+
| hostname      | prasun-PC |
+---------------+-----------+


mysql> SHOW VARIABLES WHERE Variable_name = 'port';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| port          | 3306  |
+---------------+-------+
1 row in set (0.00 sec)
 