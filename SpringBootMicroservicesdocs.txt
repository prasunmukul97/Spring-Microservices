PhotoApp Eureka server configuration:

server.port=8010
spring.application.name=Discoveryservice
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:8010/eureka  //This is the URL by which client applications communicate with Eureka server.

Users microservices properties:

server.port=0 //0 means random port number will be assigned by server.
spring.application.name=users-ws
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
spring.devtools.restart.enabled=true

To enable H2 Console we use below properties:
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

Urls used to access ws via zuul:
http://localhost:8011/users-ws/users/status/check
http://localhost:8011/account-ws/account/status/check

Important point regarding instance of microservices.
1. If one instance of a microservices is up and running, and we try to start another instance of same microservice, then instance gets overriden.
	Instance id is: prasun-PC:users-ws:0
	For eg: 
	 we have microservice running at port number:61703 with URL- http://prasun-pc:61703/users/status/check
	 If we start another instance of same microservice, then port number gets overriden and only one instance gets registered.
									 port number: 61756 with URL -http://prasun-pc:61756/users/status/check
2. To register multiple instance of same microservice to Eureka discovery, we have to use multiple instance-id.
3. To specify multiple instance id , we use a property :
		eureka.instance.instance-id
	 This property must have a unique value. 
	 We can use variable to generate random value.
	 ${spring.application.name}:${spring.application.instance_id:${random.value}}
	 
	 spring.application.name - It is read from property file.
	 spring.application.instance_id- It is passed by command line argument. 
				mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=prasun
	 If not available then random value gets generated and assigned using ${random.value}
	  For example:Multiple running instances are -
			users-ws:fac40ee821f177c862a55ea9ba4602b6 , users-ws:8e8853807eeee5dd5ad5e291deaa3629
			
			users-ws- application name
			fac40ee821f177c862a55ea9ba4602b6- random generated value.
			
	  After passing value of instance id from command line , we get below instances running:
	  
	  users-ws:2f801011f29f34b73e0497dc3fb02a34 , users-ws:prasun , users-ws:b1b2d411b54e6023f3fb68be3c68b4e1 , users-ws:52e2c332d254eb5d6cf94abe6f3a8ead
	  
	  Command to assign port number using command line:
	  
	  mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=saurabh,--server.port=8999
			
			
4. For server port as well, we can either pass a port number using commandline or we can use the port randomly generated by server if it is not passed as command line.
	server.port=${PORT:0}
	Here PORT is assigned to server.port if passed as command line or else 0 is used to genrate random port number.
	
Important points on spring security.
1. If we add spring boot starter security to pom file of microservice, then we get unauthorized response for any URL that we hit.

{
    "timestamp": "2020-02-04T06:59:02.578+0000",
    "status": 401,
    "error": "Unauthorized",
    "message": "Unauthorized",
    "path": "/users/status/check"
}

For this to resolve, we need to provide proper websecurity configuration.

Sample create user format:

{
	"firstName":"Prasun",
	"lastName":"Saurabh",
	"email":"Prasun.Saurabh@gmail.com",
	"password":"8197400744"
}

Spring Security:
-----------------------------------------------------------------------------

To change default user name and password we use below properties in application.properties file:

spring.security.user.name=prasun
spring.security.user.password=prasun

Spring boot security using JPA and MySql:
------------------------------------------------------------------
CREATE TABLE user (id VARCHAR(10), active VARCHAR(10),
       password VARCHAR(100), roles VARCHAR(50), user_name VARCHAR(100));
	   
INSERT INTO user VALUES('1',"Y","pass","ROLE_USER","user");

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/springbootdb
spring.datasource.username=root
spring.datasource.password=password

SHOW VARIABLES WHERE Variable_name = 'hostname';
+---------------+-----------+
| Variable_name | Value     |
+---------------+-----------+
| hostname      | prasun-PC |
+---------------+-----------+


mysql> SHOW VARIABLES WHERE Variable_name = 'port';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| port          | 3306  |
+---------------+-------+
1 row in set (0.00 sec)

Spring boot config file properties:
------------------------------------
1. Each microservice has its own application.properties file.
When we configure microsservices with config server then each microservices will be reading configuration from two files.
one is application.properties file served by config server and another is config file present in microservice.
If any of the property with the same name is available at both , then property value in config server has a higher priority.

We can have more specific configuration for each microservices file.

For ex:
 Suppose microservice is with name A.
	Then we can have A.properties as property file. 
	
If we add spring boot proflie <profile> to microservices, then we can have property file with the profile name as below:

	A-<profile>.properties.
	
Priority Order of property value if present in all properties file.

A-<profile>.properties > A.properties > application.properties(config server) > application.properties (local microservice).

We need to add below dependency in microservice to get support of config server:
<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
    <version>2.2.2.RELEASE</version>
</dependency>

We need to add another file called bootstrap.properties. 
This file will be loaded before application.properties file. 
It is loaded even before beans are created.

Below properties in config server application file is needed to connect to git repo:

spring.cloud.config.server.git.uri=https://github.com/prasunmukul97/PhotoAppConfiguration
spring.cloud.config.server.git.username=prasunmukul@gmail.com
spring.cloud.config.server.git.password=Shiva$456
spring.cloud.config.server.git.clone-on-start=true

Below properites are needed in bootstrap.properties file of users microservice to connect to config server:

spring.cloud.config.uri=http://localhost:8012
spring.cloud.config.name=PhotoAppConfigServer

Spring cloud bus. Dynamic configuration update:
-----------------------------------------------
1.Spring cloud bus will help us to push configuration changes to all microservices while they are running.

2.For microservices to receive these configuration changes and uses the new value, they don't need to restart.

3.To configure spring cloud bus we will not need to create a stand alone microservice to make it work.

4.We will need to add spring cloud bus and spring boot actuator dependencies 

		<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bus-amqp -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bus-amqp</artifactId>
			<version>2.2.1.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<version>2.2.6.RELEASE</version>
		</dependency>
	and also other minor configurations detail to config server that will need to receive those dynamic configuration updates.
	
	We would need to add starter bus dependency to all that microservices that we want to subscribe the configuration refresh change.
	
	Spring boot actuator is used for auditing.we can see useful details about our system.
	
5.This will make our microservices work as listners or work as subscribers to receive updates from spring cloud config server
	and these updates will be broadcasted to all subscribed microservices with the help of messaging technology and protocol used is AMQP(Advanced message queuing protocol).
	This Messenger is asynchronous and it decouple application by separating sending and receiving data and there is a message broker that will also need to configure and this is called 
	RabbitMQ.
	
	RabbitMQ.
	---------
	1. It is a Messaging Broker.
	2. It is an intermediary for messaging.
	3. It gives applications a common platform to send and receive messages and for messages a safe place to live until they are received.

Enable /bus-refresh URL endpoint:
----------------------------------
/bus-refresh is present actuator endpoint.
If we want to broadcast the updated configuration we use /bus-refresh actuator endpoint.
We send HTTP POST request to /bus-refresh.

To enable bus refresh end point to our config server we need to add below property in config server application.properties file.

management.endpoints.web.exposure.include=bus-refresh

Problem faced during installation of RabbitMQ:
1. Please set ERLANG_SERVICE_MANAGER_PATH to the folder containing "erlsrv.exe".
2.	ERLANG_HOME not set correctly.
    ******************************        
         Please either set ERLANG_HOME to point to your Erlang installation or place the
         RabbitMQ server distribution in the Erlang lib folder.
		 
To resolve above two problems, we set below paths in environment varaible.

ERLANG_HOME=C:\Program Files\erl10.7\erts-10.7
ERLANG_SERVICE_MANAGER_PATH=C:\Program Files\erl10.7\erts-10.7\bin
Add below to the path variable as well:
C:\Program Files\erl10.7\erts-10.7\bin

Then try access below URL:
http://localhost:15672/

If still error persists then open RabbitMQ MQ Command Prompt (sbin dir) and give below plugin command:

rabbitmq-plugins enable rabbitmq_management

Above can be fround at URL:
https://www.rabbitmq.com/management.html

Then again try using http://localhost:15672/ . If the UI opens then login with guest username and password.
Else, Again stop and start rabbit mq.

Setting up File System Backend:
--------------------------------
1. We need to set the active profile as native.
We add below properties to application.properties of config server.

spring.profiles.active=native
spring.cloud.config.server.native.search-locations=file:///G:/SBLearn


The file name at the location <file:///G:/SBLearn> must be with <config_server_name>.properties.
For eg:  PhotoAppConfigServer.properties

To test if native file system is working we hit GET request to below URL:

http://localhost:8012/PhotoAppConfigServer/native

It should return response as:

{
    "name": "PhotoAppConfigServer",
    "profiles": [
        "native"
    ],
    "label": null,
    "version": null,
    "state": null,
    "propertySources": [
        {
            "name": "file:///G:/SBLearn/PhotoAppConfigServer.properties",
            "source": {
                "token.expiration.timeInMillis": "86400000",
                "token.secret": "asdfsd7r8e8727272",
                "login.url": "/user/login",
                "config.server.test.property": "TestFromConfigFileRefresh2"
            }
        }
    ]
}

When spring.profiles.active=git, then git backend system is active. When we give native, the file system backend is active.

When both profile is active, then property from both the backend is fetched.
http://localhost:8012/PhotoAppConfigServer/native - request

response:
{
    "name": "PhotoAppConfigServer",
    "profiles": [
        "native"
    ],
    "label": null,
    "version": null,
    "state": null,
    "propertySources": [
        {
            "name": "file:///G:/SBLearn/PhotoAppConfigServer.properties",
            "source": {
                "token.expiration.timeInMillis": "86400000",
                "token.secret": "asdfsd7r8e8727272",
                "login.url": "/user/login",
                "config.server.test.property": "TestFromConfigFileRefresh2"
            }
        },
        {
            "name": "https://github.com/prasunmukul97/PhotoAppConfiguration/application.properties",
            "source": {
                "token.expiration.timeInMillis": "86400000",
                "token.secret": "asdfsd7r8e8727272",
                "login.url": "/user/login",
                "config.server.test.property": "TestFromConfigFileRefresh1"
            }
        }
    ]
}

Native file system takes precedence over git backend system.

If we have microservice specific properties file, then preference will be given to this file.
If config server has two properties file.
1. application.properties
2. <users-ws>.properties

If any property present at both the files, then users microservice will take value from <users-ws>.properties.
To access both the files from config server, we need to provide below property in users-ms bootstrap.properties file:
spring.cloud.config.uri=http://localhost:8012
spring.cloud.config.name=users-ws

When we hit URL: http://localhost:8012/users-ws/default
Below response is received:
{
    "name": "users-ws",
    "profiles": [
        "default"
    ],
    "label": null,
    "version": null,
    "state": null,
    "propertySources": [
        {
            "name": "file:///G:/SBLearn/users-ws.properties",
            "source": {
                "token.expiration.timeInMillis": "86400000",
                "token.secret": "asdfsd7r8e8727272",
                "login.url": "/user/login",
                "config.server.test.property": "TestfromUsersMicroservicespecificconfigfile"
            }
        },
        {
            "name": "file:///G:/SBLearn/application.properties",
            "source": {
                "token.expiration.timeInMillis": "86400000",
                "token.secret": "asdfsd7r8e8727272",
                "login.url": "/user/login",
                "config.server.test.property": "TestFromConfigFileRefresh2"
            }
        }
    ]
}

Hence both the properties file are accesible to users microservice.
application.properties is shared across all microservices.


Spring boot actuator:
---------------------
It provides many useful features which we can use to monitor and manage spring boot application.

Features:
	/health - Health check. Status of mircroservice. we get information about instance.
	/beans - Displays a complete list of beans that are available in our microservice.
	/httptrace - Displays HTTP trace information(By default, the last 100 HTTP request and response exchanges)
	
	etc...
To enable spring boot actuator, we need to add actuator dependency to project file.

	<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	
Add below properties to application.properties file:
management.endpoints.web.exposure.include=beans,health,routes,httptrace
api.zuul.actuator.url=/actuator/*

.antMatchers(env.getProperty("api.zuul.actuator.url")).permitAll() ->need to add in web security file.

We can call actuator endpoint as below:
http://localhost:8011/actuator/routes
Below is the response of above URL:
{"/account-ws/**":"account-ws","/users-ws/**":"users-ws"}

Use of MYSQL:
---------------

Below are the SQL COMMANDS:

show databases;
use photo_app;

show tables;

-create user 'prasun'@'localhost' identified by 'password';

-grant all privileges on photo_app.* to 'prasun'@'localhost';

-flush privileges;

Login to MySQL with above user and password.

Provide below my sql connector dependency to the microservice pom.xml file:
<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.20</version>
</dependency>

Encryption and Decryption:
--------------------------
Spring cloud config support two different types of encryption.
1. Symmetric Encryption(Shared)
2. Asymetric Encryption(RSA keypair)

1. Symmetric Encryption:
	It is bit quicker to setup and bit easier to use. 
	We want to come up with a unique alphanumeric String of characters which will be used as encryption key.
	The same key will be used to encrypt and decrypt the information.
	It is done all behind the scenes for us by the framework and is made extremely simple to use.
	
2. Asymetric Encryption:
	Asymetric Encryption is a superior type of encryption and it requires us to use java command line utility called keytool.
	We will use key tool to generate a password protected key store file.
	This key store file will contain a private key which will be used for encryption and decryption of information.
	Encryption will be done with public key. 
	Private key is needed to decrypt that information.
	
Steps:
1. Download Java Cryptographic Extension file from below path:
	https://www.oracle.com/java/technologies/javase-jce8-downloads.html
	
2. Extract the zip file and get two jar files.
   a. local_policy.jar
   b. US_export_policy.jar
   
3. copy these two jar files from extracted folder and past it to below path:
	C:\Program Files\Java\jdk1.8.0_162\jre\lib\security

For Symmetric Encryption use below methods:
1. In config server edit bootstrap.properties file and add below property:
	encrypt.key=asdfFGH890234rs
2. Go to postman and trigger a POST request to the below URL to decrypt information present at body of POST:
	http://localhost:8012/encrypt
3. To decrypt use below URL:
	http://localhost:8012/decrypt
	
To encrypt value in property file, use property value with {cipher} prefix.
config.server.test.property={cipher}414fc6e63617f29b23ade25fbd65126bb8ac44103ff33f9e6c1403bb1592067c12779fb6794f39158d4096a07f343bb196f4abbd98404088f8c6c1e7e76428b4
Below is encrypted value of actual text.
414fc6e63617f29b23ade25fbd65126bb8ac44103ff33f9e6c1403bb1592067c12779fb6794f39158d4096a07f343bb196f4abbd98404088f8c6c1e7e76428b4
Config server automatically decrypt it using the same key when we fetch the value of this property.

For Asymetric Encryption we use below methods:
1. Creating a keystore for Asymetric encryption.
	Use below keytool command to generate keystore file:
	Here -dname= distinguised name
			CN= Common name
			OU= Organizational unit
			O=Organization
			L=locality
			S=State
			C=Country
		-keypass= password under which private key is protected.
		apiEncryptionKey.jks = name of the file that will contain private and public keys.
		-storepass= password used to protect the integrity of keystore file.
		
G:\KeyStoreFiles>keytool -genkeypair -alias apiEncryptionKey -keyalg RSA -keypass 1q2w3e4r -keystore apiEncryptionKey.jks -storepass 1q2w3e4r

What is your first and last name?
  [Unknown]:  Prasun Saurabh
What is the name of your organizational unit?
  [Unknown]:  API Developement
What is the name of your organization?
  [Unknown]:  TestLocal
What is the name of your City or Locality?
  [Unknown]:  Bangalore
What is the name of your State or Province?
  [Unknown]:  KA
What is the two-letter country code for this unit?
  [Unknown]:  C
Is CN=Prasun Saurabh, OU=API Developement, O=TestLocal, L=Bangalore, ST=KA, C=C correct?
  [no]:  yes


Warning:
The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using "keytool -importkeystore -srckeystore apiEncryptionKey.jks -destkeystore apiEncryptionKey.jks -deststoretype pkcs12".

G:\KeyStoreFiles>keytool -importkeystore -srckeystore apiEncryptionKey.jks -destkeystore apiEncryptionKey.jks -deststoretype pkcs12
Enter source keystore password:
Entry for alias apiencryptionkey successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled

Warning:
Migrated "apiEncryptionKey.jks" to Non JKS/JCEKS. The JKS keystore is backed up as "apiEncryptionKey.jks.old".

Note:Password should be minimum 6 character long.

2. Use of encryption key file for Asymetric encryption and decryption.
Add below properties to bootstrap.properties file in config server:
#For Symmetric encryption and decryption.
#encrypt.key=asdfFGH890234rs

#For Asymetric encryption and decryption

encrypt.key-store.location=file:///G:/KeyStoreFiles/apiEncryptionKey.jks
encrypt.key-store.password=1q2w3e4r
encrypt.key-store.alias=apiEncryptionKey

Then follow the same process for encryption and decryption as symmetric.

Microservices Communication:
----------------------------
1. Using RestTemplate method:

@Override
	public UserDto getUserByUserId(String userId) throws UsersServiceException{
		UserEntity findByUserId = userRepository.findByUserId(userId);
		if(findByUserId==null ) throw new UsersServiceException("user not found");		
		UserDto userDto=new ModelMapper().map(findByUserId,UserDto.class);
		
		//Use of RestTemplate exchange method to hit request to albums microservice from users microservice.
		
		String albumUrl=String.format(env.getProperty("albums.url"), userId);
		ResponseEntity<List<AlbumResponseModel>> albumListResponse = restTemplate.exchange(albumUrl, HttpMethod.GET,null,new ParameterizedTypeReference<List<AlbumResponseModel>>() {
		});
		List<AlbumResponseModel> albumList = albumListResponse.getBody();
		userDto.setAlbums(albumList);
		return userDto;
	}
	
2. Using Feign client:
 - Feign is an HTTP client. It helps spring boot application to programatically send the request to remote or an internal microservice and then get back response.	
 - Declarative. The biggest difference between feign and resttemplate is that feign is declarative.
 - LoadBalanced.
 
 To create a feign client we need to create a java interface and annotate it with @FeignClient annotation.
	
	@FeignClient(name="albums-ws")
	public interface AlbumServiceClient{
		@GetMapping("/users/{id}/albums")
		public List<AlbumResponseModel> getAlbums(@PathVariable String id);
	}

Fein supports client side load balancing.
Spring cloud integrates with Ribbon and Eureka to provide load balancing.

If we need to send request to external remote URL, we just need to add URL in feign client annotation.
@FeignCLient(name="PhotoAlbums" url="https://website.com")

HTTP Request logging in Feign client.
We add below property to application.properties:
logging.level.com.app.photoapp.api.users.data.AlbumsServiceClient=DEBUG

Then we create Logger.Level bean in spring application main class file as below:
@Bean
	Logger.Level feignLoggerLevel(){
		return Logger.Level.FULL;
	}
This logs the API request and response.

Feign Error Decoder:
--------------------
Create a class FeignErrorDecoder that implements ErrorDecoder interface from feign.codec package.
package com.app.photoapp.api.users.shared;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ResponseStatusException;

import feign.Response;
import feign.codec.ErrorDecoder;

@Component
public class FeignErrorDecoder implements ErrorDecoder {
	
	Environment environment;
	
	@Autowired
	public FeignErrorDecoder(Environment environment) {
		this.environment=environment;
	}
	

	@Override
	public Exception decode(String methodKey, Response response) {
		switch(response.status()) {
		case 400:
			break;
		case 404:
			if(methodKey.contains("getAlbums")) {
				return new ResponseStatusException(HttpStatus.valueOf(response.status()), environment.getProperty("error.msg.albumNotFound"));
			}
			break;
		case 500:
			break;
		default:
			return new Exception(response.reason());		
		}
		return null;
	}

}

error.msg.albumNotFound=Users Albums not found

This will handel exceptions based on response status. 
Here methodKey is the className#methodnameWithSignature.
For eg: AlbumServiceClient#getAlbums(String)

Enable Hystrix Circuit Breaker:
---------------------------------
Add below dependency to pom.xml:

<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-hystrix -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
	</dependency>
Add below property to application.properties:

feign.hystrix.enabled=true

Add @EnableCircuitBreaker to main class:

@EnableCircuitBreaker
public class PhotoAppApiUsersApplication {
 
	public static void main(String[] args) {

Add fallback class to the feign client.

use fallback=<ClassName>.class inside @FeignClient
@FeignCLient(name="PhotoAlbums" ,url="https://website.com" ,fallback=Albumfallback.class)

The Fallback class should implement client interface.
class Albumfallback implements AlbumsServiceClient{

	//Add unimplemented method and provide the fall back logic.
}

If the backend service comes up and running, the circuit will be close and circuit breaker fallback method will not get executed.
The response from backend service comes up.

Error handling with Feign Hystrix FallbackFactory:
-----------------------------------------------------
@FeignClient(name="albums-ws",fallbackFactory=AlbumsFallbackFactory.class)
public interface AlbumsServiceClient {

	@GetMapping("/users/{id}/albums")
	public List<AlbumResponseModel> getAlbums(@PathVariable("id") String id);

}

@Component
class Albumsfallback implements AlbumsServiceClient {

	@Override
	public List<AlbumResponseModel> getAlbums(String id) {
		return new ArrayList<>();
	}

}
@Component
class AlbumsFallbackFactory implements FallbackFactory<AlbumsServiceClient>{

	@Override
	public AlbumsServiceClient create(Throwable cause) {
		return new AlbumsSerivceFallbackClient(cause);
	}
	
}


class AlbumsSerivceFallbackClient implements AlbumsServiceClient{
	
	Logger logger=LoggerFactory.getLogger(this.getClass());
	Throwable cause;
	
	public AlbumsSerivceFallbackClient(Throwable cause) {
		this.cause=cause;
	}
	@Override
	public List<AlbumResponseModel> getAlbums(String id) {
		if(cause instanceof FeignException && ((FeignException)cause).status()==404) {
			logger.error("404 error took place when getAlbums was called with userId "+ id 
					+ " Error Message:"+
						cause.getLocalizedMessage());
		}else {
			logger.error("Other error took place "+cause.getLocalizedMessage());
		}
		return new ArrayList<>();
	}
	
}























































































































































	
	



























































































































































 